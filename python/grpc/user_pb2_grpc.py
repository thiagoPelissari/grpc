# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import user_pb2 as user__pb2


class UserServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.List = channel.unary_unary(
                '/userguide.UserService/List',
                request_serializer=user__pb2.Empty.SerializeToString,
                response_deserializer=user__pb2.UserList.FromString,
                )
        self.Insert = channel.unary_unary(
                '/userguide.UserService/Insert',
                request_serializer=user__pb2.NewItem.SerializeToString,
                response_deserializer=user__pb2.UserItem.FromString,
                )
        self.Find = channel.unary_unary(
                '/userguide.UserService/Find',
                request_serializer=user__pb2.UserItemId.SerializeToString,
                response_deserializer=user__pb2.UserItem.FromString,
                )
        self.Delete = channel.unary_unary(
                '/userguide.UserService/Delete',
                request_serializer=user__pb2.UserItemId.SerializeToString,
                response_deserializer=user__pb2.UserItem.FromString,
                )
        self.ListStreamServer = channel.unary_stream(
                '/userguide.UserService/ListStreamServer',
                request_serializer=user__pb2.Empty.SerializeToString,
                response_deserializer=user__pb2.UserItem.FromString,
                )
        self.ListStreamClient = channel.stream_unary(
                '/userguide.UserService/ListStreamClient',
                request_serializer=user__pb2.UserItemId.SerializeToString,
                response_deserializer=user__pb2.UserList.FromString,
                )
        self.ListStreamBidirectional = channel.stream_stream(
                '/userguide.UserService/ListStreamBidirectional',
                request_serializer=user__pb2.UserItemId.SerializeToString,
                response_deserializer=user__pb2.UserItem.FromString,
                )


class UserServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def List(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Insert(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Find(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Delete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListStreamServer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListStreamClient(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListStreamBidirectional(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UserServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'List': grpc.unary_unary_rpc_method_handler(
                    servicer.List,
                    request_deserializer=user__pb2.Empty.FromString,
                    response_serializer=user__pb2.UserList.SerializeToString,
            ),
            'Insert': grpc.unary_unary_rpc_method_handler(
                    servicer.Insert,
                    request_deserializer=user__pb2.NewItem.FromString,
                    response_serializer=user__pb2.UserItem.SerializeToString,
            ),
            'Find': grpc.unary_unary_rpc_method_handler(
                    servicer.Find,
                    request_deserializer=user__pb2.UserItemId.FromString,
                    response_serializer=user__pb2.UserItem.SerializeToString,
            ),
            'Delete': grpc.unary_unary_rpc_method_handler(
                    servicer.Delete,
                    request_deserializer=user__pb2.UserItemId.FromString,
                    response_serializer=user__pb2.UserItem.SerializeToString,
            ),
            'ListStreamServer': grpc.unary_stream_rpc_method_handler(
                    servicer.ListStreamServer,
                    request_deserializer=user__pb2.Empty.FromString,
                    response_serializer=user__pb2.UserItem.SerializeToString,
            ),
            'ListStreamClient': grpc.stream_unary_rpc_method_handler(
                    servicer.ListStreamClient,
                    request_deserializer=user__pb2.UserItemId.FromString,
                    response_serializer=user__pb2.UserList.SerializeToString,
            ),
            'ListStreamBidirectional': grpc.stream_stream_rpc_method_handler(
                    servicer.ListStreamBidirectional,
                    request_deserializer=user__pb2.UserItemId.FromString,
                    response_serializer=user__pb2.UserItem.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'userguide.UserService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class UserService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def List(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/userguide.UserService/List',
            user__pb2.Empty.SerializeToString,
            user__pb2.UserList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Insert(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/userguide.UserService/Insert',
            user__pb2.NewItem.SerializeToString,
            user__pb2.UserItem.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Find(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/userguide.UserService/Find',
            user__pb2.UserItemId.SerializeToString,
            user__pb2.UserItem.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/userguide.UserService/Delete',
            user__pb2.UserItemId.SerializeToString,
            user__pb2.UserItem.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListStreamServer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/userguide.UserService/ListStreamServer',
            user__pb2.Empty.SerializeToString,
            user__pb2.UserItem.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListStreamClient(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/userguide.UserService/ListStreamClient',
            user__pb2.UserItemId.SerializeToString,
            user__pb2.UserList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListStreamBidirectional(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/userguide.UserService/ListStreamBidirectional',
            user__pb2.UserItemId.SerializeToString,
            user__pb2.UserItem.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
